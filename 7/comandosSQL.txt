SQL É RELACIONAL, OU SEJA, HÁ TABELAS QUE RELACIONAM ENTRE SI
-- Banco de dados trabalha com crud:
-- CREATE - INSERT
-- READ - SELECT
-- UPDATE
-- DELETE - DROP

-- COMANDO PARA EXECUTAR
-- sqlite3 favorites.db

-- carregando o arquivo csv

-- .move csv

-- IMPORTAR E CARREGAR EM UMA TABLE CHAMADA FAVORITES
-- .import favorites.csv favorites
-- .quit

-- VER O ESQUEMA DO BANCO:
-- .schema

-- SELECIONAR COLUNAS ESPECIFICAS TEM A SEGUNTE SINTAXE:
-- SELECT columns FROM table;

-- SELECIONAR TUDO:
-- SELECT * FROM favorites;

-- SELECIONAR UMA COLUNA COM UM LIMITE DE DADOS:
-- SELECT language FROM favorites LIMIT 10;

-- HÁ FUNÇÕES PRÓPRIAS DO SQL COMO AVG, COUNT, DISTINCT, LOWER, MAX, MIN, UPPER, ETC...

-- CONTAR TODOS OS ELEM:
-- SELECT COUNT(*) FROM favorites;

-- SELECIONAR CADA TIPO DE DADO QUE HÁ DIFERENTE, NO CASO APENAS C, SCRATCH E PYTHON:
-- SELECT DISTINCT(language) FROM favorites;

-- TAMBÉM PODE AGRUPAR FUNÇÕES COMO:
-- SELECT COUNT(DISTINCT(language)) FROM favorites;





-- ALGUMAS FUNÇÕES QUE NOS DÃO UM CONTROLE MAIS ESPECÍFICO SÃO
WHERE, LIKE, ORDER BY, LIMIT, GROUP BY...

SELECT COUNT(*) FROM favorites WHERE language = 'C';

-- CONSULTAR BASEADO NOS QUE PREFERIRAM C COMO LINGUAGEM E - AND PROBLEM FAVORITO HELLO, WORLD
SELECT COUNT(*) FROM favorites WHERE language = 'C' AND problem = 'Hello, World';

-- AGRUPAR COM SQL:
SELECT language, COUNT(language ou *) FROM favorites GROUP BY language;

-- AGRUPAR E ORDENAR COM BASE NOS COUNT
SELECT language, COUNT(*) FROM favorites GROUP BY language ORDER BY COUNT(*);
use DESC ou ASC para alterar a ordem, crescente ou decrescente;
    se quiser renomear alguma operação faça COUNT(*) AS -nome-
        ex: SELECT language, COUNT(*) AS n FROM favorites GROUP BY language ORDER BY n;






COMANDOS PARA INSERÇAO DE DADOS:
Sintaxe: INSERT INTO table (coluna, ...) VALUES(value, ...);


PARA DELETAR
DELETE FROM table WHERE condicion;
    ex: DELETE FROM favorites WHERE Timestamp IS NULL;


PARA ATUALIZAR:
UPDATE table SET column = value WHERE condition;
    ex: UPDATE favorites SET problem = 'Nenhum' WHERE problem IS 'Hello, World';


PRINCIPAIS TIPOS DE DADOS:
BLOB - BINARIOS;
INTEGER;
NUMERIC;
REAL;
TEXT

Especificar que uma coluna não pode ser NULL: NOT NULL;

UNIQUE pode evitar que sejam inseridos em tabelas valores repetidos.

- PRIMARY KEY:
Chave primaria é quando há uma tabela que precisa criar um id para os elementos

- FOREIGN KEY:
Chave estrangeira é quando em uma tabela há referencia do ID de outra tabela.
    Como foi feito no exemplo:
        show_id INTEGER NOT NULL,
        FOREIGN KEY(show_ID) REFERENCES shows(id)


CONSULTAS ALINHADAS COM SQL:
SELECT * FROM shows WHERE id IN (SELECT show_id FROM ratings WHERE rating >= 6.0)


COMBINAR TABELAS COM SQL COM JOIN, O FAMOSO
É dado algo semelhante a criar uma tabela temporária que é a junção total
ou elemento especificos de tabelas diferentes.

Ex: SELECT title, rating FROM shows JOIN ratings ON shows.id = ratings.show_id WHERE rating >= 6.0 LIMIT 10;

----RELAÇAO DE 1 PARA MUITOS
- No caso do IMDB, um filme pode possuir mais de 1 genero, 1 filme para muitos gêneros.




MUITO PARA MUITOS


