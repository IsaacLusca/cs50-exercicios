formas de armazenar dados

// fila
// fifo. FIRST IN, FIRST OUT
//  primeiro a entrar, primeiro a sair
// enqueue e dequeue

exemplo:

const int CAPACITY = 50;

typedef struct
{
    person people[CAPACITY];
    int size;
} queue;

- pilha suporta o LIFO
- Last in, first out
- Ultimo a entrar, primeiro a sair.
- push e pop.

typedef struct
{
    person people[CAPACITY];
    int size;
} stack;

- usar -> substitui um ponteiro e o ponto de uma struct. * .

- array sem nenhum tratamento tem um problema, pois ela em seu estado normal é uma forma de armazenar dados de maneira contígua
isso impede que seja possível alocar memórias dinamicamente
para resolver, utilizar estruturas especificas como uma LISTA VINCULADA (não é um array)

         1,  2,  3
p1      p2, p3, pnul
 p1 é o ponteiro de 1, p2 é de 2 e assim sucessivamente

node = nó

-- define um tipo de dado chamado node
-- cada node contem um inteiro e um ponteiro
-- o ponteiro aponta para o proximo node
typedef struct node
{
    int number;
    struct node *next;
} node;

//forma de criar uma lista de tamanho 0
node *list = NULL;

//forma de alocar espaço para o nó
node *n = malloc(sizeof(node));

(*n).number = 1;
ou
n->number = 1;

n->next = NULL;

list = n;
